Copyright 2014 (c) Sizing Servers Lab
University College of West-Flanders, Department GKG * 
Author(s):
    Dieter Vandroemme

Preface
------------------------------
All boilerplate code for Java based agents resides in be.sizingservers.vapus.agent in the vApus-agent project.
It implements the communication protocol as stated in the Sizing Servers wiki: http://wiki.sizingservers.be/index.php/VApus-vApus-agent_communication_protocol

Important: These classes are coded against Java 6 for backwards compatibility reasons.

1) Writing an agent
------------------------------

Good example are the vApus-wmi agent and the vApus-dstat agent. 

Create a new Maven project from the "vApus-agent-archetype" archetype.
Use the naming conventions stated at http://wiki.sizingservers.be/wiki/VApus_monitor_sources_and_vApus_agents_naming_conventions.
Do not forget to update the properties (e.g. name) of the agent in the .properties files, pom.xml, README.txt and start.cmd

1.1) Classes
------------------------------
Basically you need three classes (+ your own helper classes):
    A monitor class: Extend from be.sizingservers.vapus.agent.Monitor.
                     Most work must be done here because getting counters is obviously very monitor-type specific.
                     Since entities (for instance, a computer), headers and counters need to be gson formatted, serialize an instance of be.sizingservers.util.Entities. 
                     Make sure you do not have shared data with other monitor instances.
    
    A server class:  Extend from be.sizingservers.vapus.agent.Server and implement getNewMonitor(...).
                     This returns a new monitor that is used in the super class.
                     In the super class resides a simple TCP (IPv4/IPv6) server socket.
                     It provides a monitor instance per connection.
    
    An agent class:  The main entry point of the application. 
                     Combines a server with an agent. 
                     Extend from be.sizingservers.vapus.agent.Agent and call the super.main(...) in the main fx.


Those are included, and must be edited, in the project if you started from the "vApus-agent-archetype" archetype:
    Change filenames and package name accordingly.
    The monitor class is the only one where you must add logic, the server and agent code you may leave as is.
    Commented code, in the monitor class, is example code from the vApus-wmi agent to help you. I suggest that you look at the existing agent.


1.2) .properties files
------------------------------
You need 2 .properties files.

These are included, and must be edited, in the project if you started from the "vApus-agent-archetype" archetype. (src/main/resources)

A vApus-agent.properties. e.g.:

    # Copyright 2014 (c) Sizing Servers Lab
    # University College of West-Flanders, Department GKG
    #
    # Author(s):
    # 	<insert your name here>
    
    # None of following properties can be ommited.
    
    # The name of the monitor.
    name=vApus-dstat
    
    #The version of this monitor.
    version=0.1
    
    copyright=Copyright 2014 (c) Sizing Servers Lab\nUniversity College of West-Flanders, Department GKG
    
    #The port the server will listen at.
    defaultPort=5556
    
    #The interval that counters are sent to the client in milliseconds.
    sendCountersInterval=1000

    # Can be . or , depending on for example the locale. This is purely for parsing decimal values client-side.
    decimalSeparator=.

A logging.properties. e.g.:

    # Copyright 2014 (c) Sizing Servers Lab
    # University College of West-Flanders, Department GKG
    #
    # Author(s):
    # 	Dieter Vandroemme
    
    # Execute locate logging.properties for example (default properties in jdk).
    
    handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
    
    # Global logging level.
    .level= SEVERE
    
    # Outputs in the apps dir. u% == unique number.
    java.util.logging.FileHandler.pattern = vApus-dstat%u.log
    java.util.logging.FileHandler.limit = 50000
    java.util.logging.FileHandler.count = 1
    
    # Other formatters, like XMLFormatter, are possible. This outputs to flat file.
    java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter
    
    java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter

1.3) Other files
------------------------------
README.txt and start.cmd are included, and must be edited, in the project if you started from the "vApus-agent-archetype" archetype. (src/main/not-packaged-resources)

README.txt example:
    
    Dependencies:
    * Administrator privileges
    * JRE6 64-bit or more recent
    * .Net 2.0 or 3.5
    * .Net 4.0

start.cmd example:
    
    @echo off
    type README.txt
    start /wait java -jar vApus-wmi.jar